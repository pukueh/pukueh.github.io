<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>基于GitHub+jsDelivr+PicGo方案的图床搭建</title>
    <link href="/2024/07/02/%E5%9F%BA%E4%BA%8EGitHub-jsDelivr-PicGo%E6%96%B9%E6%A1%88%E7%9A%84%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/"/>
    <url>/2024/07/02/%E5%9F%BA%E4%BA%8EGitHub-jsDelivr-PicGo%E6%96%B9%E6%A1%88%E7%9A%84%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr><ul><li>对于写博客的同学来说，图床几乎是必不可少的。最开始我简单的使用了不知名在线图床，然后有一天图片突然加载不起来了，为了规避风险，于是想自己搭建一个图床。</li><li>一开始想要尝试的方案是<strong>Cloudflare R2 + WebP Cloud + PicGo</strong>，可惜Cloudflare R2服务的开通需要信用卡，作为学生没有条件随放弃。转而使用目前的方案。</li><li>本篇是用于记录个人图床的搭建。</li></ul><hr><h1 id="一、可能需要的前置知识"><a href="#一、可能需要的前置知识" class="headerlink" title="一、可能需要的前置知识"></a>一、可能需要的前置知识</h1><ul><li><p>计算机网络相关知识</p></li><li><p>命令行操作</p></li><li><p>GitHub基本操作</p></li></ul><h1 id="二、该方案的优缺点"><a href="#二、该方案的优缺点" class="headerlink" title="二、该方案的优缺点"></a>二、该方案的优缺点</h1><ul><li><p>优点：</p><ul><li>免费：GitHub提供免费的存储空间，且对于公开仓库没有存储限制。</li><li>高速访问：通过jsDelivr CDN加速图片分发，提高全球访问速度。</li><li>易于集成：PicGo等图床客户端支持一键上传，方便快捷。</li></ul></li><li><p>缺点：</p><ul><li>公开性：GitHub公开仓库的内容是公开的，不适合存储私密图片。</li><li>依赖外部服务：依赖于GitHub和jsDelivr的服务稳定性，如果其中任何一个服务出现问题，可能会影响到图片的访问。</li></ul></li></ul><h1 id="三、GitHub-jsDelivr-CDN-PicGo搭建图床原理简介"><a href="#三、GitHub-jsDelivr-CDN-PicGo搭建图床原理简介" class="headerlink" title="三、GitHub + jsDelivr CDN + PicGo搭建图床原理简介"></a>三、GitHub + jsDelivr CDN + PicGo搭建图床原理简介</h1><ul><li><p><strong>图床（Image Hosting）</strong>是指提供在线存储、分享和展示图片的服务平台。用户可以将图片上传到图床，然后通过链接在其他网站、论坛、博客或者社交媒体上分享图片。</p></li><li><p>以下是一些知名的图床服务：</p><ul><li><strong>Imgur</strong>：一个流行的图床服务，广泛用于论坛和社交媒体。</li><li><strong>Flickr</strong>：虽然主要是一个照片分享社区，但也提供图床服务。</li><li><strong>Google Photos</strong>：用户可以上传图片并分享链接，虽然它更多是一个个人照片存储服务。</li><li><strong>SmugMug</strong>：提供高质量的图片托管服务，适合专业摄影师。</li><li><strong>PostImage</strong>：提供简单快捷的图片上传服务。</li></ul><p>在中国大陆，也有许多国内的图床服务，如：</p><ul><li><strong>七牛云</strong>：提供图片、文件等静态资源的存储和CDN加速服务。</li><li><strong>又拍云</strong>：提供图片存储、处理和加速服务。</li><li><strong>腾讯云</strong>：也提供图片存储和分享服务。</li></ul></li><li><p><strong>jsDelivr</strong>：jsDelivr是一个开源的CDN（内容分发网络），它通过在全球各地的数据中心缓存静态内容来加速网站访问速度。对于图床来说，jsDelivr用于缓存GitHub仓库中的图片文件，并将其分发到全球用户。</p></li><li><p><strong>PicGo</strong>：PicGo是一个轻量级的图片上传工具，它支持多种图床服务，包括GitHub。PicGo允许用户将本地图片一键上传到图床，并自动生成可复用的链接。</p></li><li><p><strong>CDN</strong>，即内容分发网络（Content Delivery Network），是一种分布式网络服务，旨在通过在全球多个地理位置部署服务器，来提供快速的内容分发和访问。CDN的工作原理是通过在用户请求内容时，将内容从源服务器缓存到一个距离用户最近的节点服务器上，从而缩短用户与服务器之间的物理距离，减少数据传输时间。</p></li><li><p><strong>工作流程</strong>：</p><ol><li><strong>上传图片</strong>：使用PicGo等工具将本地图片上传到GitHub仓库。</li><li><strong>版本控制</strong>：GitHub自动对上传的图片进行版本控制，允许用户追踪图片的历史更改。</li><li><strong>图片存储</strong>：图片存储在GitHub仓库中。</li><li><strong>CDN加速</strong>：jsDelivr从GitHub仓库中获取图片，并在全球范围内缓存，以便快速向用户分发。</li><li><strong>链接生成</strong>：用户通过PicGo等工具获取图片的链接，这些链接通常是动态生成的，可以直接在网页或代码中使用。</li><li><strong>访问图片</strong>：用户通过jsDelivr CDN获取图片，享受高速的访问体验。</li></ol></li></ul><h1 id="四、开始搭建"><a href="#四、开始搭建" class="headerlink" title="四、开始搭建"></a>四、开始搭建</h1><h2 id="1-新建-GitHub-仓库并生成-Token"><a href="#1-新建-GitHub-仓库并生成-Token" class="headerlink" title="1. 新建 GitHub 仓库并生成 Token"></a>1. 新建 GitHub 仓库并生成 Token</h2><hr><ol><li><p>注册 <a href="https://github.com/">GitHub</a> 账号，登录。</p></li><li><p>创建一个公开仓库（注意这里仓库要设置成公开的，否则无法访问），仓库名随意，如 <code>ImagineHosting</code> ， &gt; 下方选择<code>Public</code></p><p><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202408020017493.png"></p></li><li><p>进入账户设置: <code>Settings</code>-&gt;<code>Developer settings</code>-&gt;<code>Personal access tokens</code>-&gt;生成新的token</p><p><code>Note</code> 做一些描述，勾选上 <code>repo</code> 的相关权限，即可生成一个 Token。如下图：</p><p><a href="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/img2.png"><img src="https://cdn.jsdelivr.net/gh/Luminous-ee/ImgBed/photos/img2.png" alt="img"></a></p><blockquote><p>注意：生成之后及时将 Token 复制到你的本地，因为一旦关闭网页将不能再看到它。</p></blockquote></li></ol><h2 id="2-配置picGo"><a href="#2-配置picGo" class="headerlink" title="2. 配置picGo"></a>2. 配置picGo</h2><hr><ol><li><p>下载 PicGo</p><p>下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><blockquote><p>mac 用户选择 .dmg 下载，windwos 选择 .exe下载</p></blockquote><p>详细内容请参考 PicGo 文档：<a href="https://picgo.github.io/PicGo-Doc/">https://picgo.github.io/PicGo-Doc/</a></p><ul><li><p>可能遇到的问题：</p><p>Mac系统安装PicGo时打开报错：文件已损坏，您应该将它移到废纸篓</p></li><li><p>解决办法<br>打开终端输入以下内容，“为安装路径，默认是以下路径”</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">sudo xattr -d com<span class="hljs-selector-class">.apple</span><span class="hljs-selector-class">.quarantine</span> <span class="hljs-string">&quot;/Applications/PicGo.app&quot;</span><br></code></pre></td></tr></table></figure><p>按照提示输入电脑锁屏密码回车即可</p></li></ul></li><li><p>配置picGo</p><blockquote><p>本文仅介绍 PicGo 配置 GitHub 图床，若想配置其它图床，请参考文档：<a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#%E5%9B%BE%E5%BA%8A%E5%8C%BA">PicGo指南——配置手册——图床区</a></p></blockquote><p>GitHub 图床： </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">&#123;<br><span class="hljs-string">&quot;repo&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-regexp">//</span> 仓库名，格式是username/reponame<br><span class="hljs-string">&quot;token&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-regexp">//</span> github token<br><span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-regexp">//</span> 自定义存储路径，比如img/<br><span class="hljs-string">&quot;customUrl&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-regexp">//</span> 自定义域名，注意要加http:<span class="hljs-regexp">//</span>或者https:<span class="hljs-regexp">//</span><br><span class="hljs-string">&quot;branch&quot;</span>: <span class="hljs-string">&quot;&quot;</span> <span class="hljs-regexp">//</span> 分支名，默认是main<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202408020026149.png"></p><ul><li><p>设定仓库名：<code>&lt;用户名/图床仓库名&gt;</code> 格式</p></li><li><p>设定分支名：<code>main</code></p></li><li><p>设定Token：粘贴之前生成的 Token</p></li><li><p>指定存储路径：如 <code>images_for_blogs/</code>，会在仓库下自动创建 images_for_blogs&#x2F; 文件夹，图片储存在此文件夹下</p></li><li><p>设定自定义域名：<code>https://cdn.jsdelivr.net/gh/用户名/图床仓库名</code></p><p>比如 <code>https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main</code></p><p>即：</p><p><code>https://cdn.jsdelivr.net/gh/&lt;用户名&gt;/&lt;仓库名&gt;@&lt;发布版本号&gt;/&lt;文件路径&gt;</code></p><blockquote><p>在图片上传后，PicGo会生成图片访问链接</p><p>因为我们使用 jsDelivr 加速访问，所以设置为<code>https://cdn.jsdelivr.net/gh/用户名/图床仓库名</code> 格式</p><p>如果发现无法访问，请添加上版本号</p></blockquote></li></ul></li></ol><h1 id="五、开始使用"><a href="#五、开始使用" class="headerlink" title="五、开始使用"></a>五、开始使用</h1><ul><li>到这里图床基本搭建完成，可以配合vs code，typora等应用进行博文写作</li><li>拖拽或点击上传图片</li><li>提示成功上传到 GitHub 仓库</li><li>复制 Markdown 外链，插入 Markdown 笔记中</li></ul><p><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202408020031502.png"></p><blockquote><p>快速上手请参考：<a href="https://picgo.github.io/PicGo-Doc/zh/guide/getting-started.html">PicGo指南——快速上手</a></p></blockquote><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><hr><ul><li>下面是一些可能用到的文章。</li></ul><ul><li><a href="https://www.pseudoyu.com/zh/2024/06/30/free_image_hosting_system_using_r2_webp_cloud_and_picgo/">从零开始搭建你的免费图床系统（Cloudflare R2 + WebP Cloud + PicGo）</a></li><li><a href="https://www.cnblogs.com/librarookie/p/15467104.html">VScode + PicGo + Github + jsDelivr 搭建稳定快速高效图床</a></li></ul><hr>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Design and Analysis of Algorithms Review</title>
    <link href="/2024/06/02/First/"/>
    <url>/2024/06/02/First/</url>
    
    <content type="html"><![CDATA[<ol><li>排序算法排序的过程、不同情况下时间复杂度、稳定性、是否原地排序</li><li>O、Ω、Θ表示法判断 </li><li>主定理计算题</li><li>分治的三个步骤结合问题的描述</li><li>认识堆，建堆，调整堆的过程</li><li>动态规划的四个步骤，最优解，最优解的值等概念；动态转移方程，以及阐述含义；填写表格计算题；设计题 </li><li>贪心的计算题 </li><li>最短路径几种算法的原理、计算  </li><li>回溯和npc的一些概念</li><li>几个经典问题属于哪类问题</li></ol><h2 id="Introduction-Ch1"><a href="#Introduction-Ch1" class="headerlink" title="Introduction(Ch1)"></a>Introduction(Ch1)</h2><ul><li>算法在软件开发中的位置  <ul><li>从体系结构到数据结构到算法</li></ul></li><li>算法的定义  <ul><li>良定义的计算过程、解决特定问题的步骤、有输入和输出</li></ul></li><li>为什么要分析性能</li><li>机器无关的时间分析</li></ul><h2 id="Getting-Started-Ch2"><a href="#Getting-Started-Ch2" class="headerlink" title="Getting Started(Ch2)"></a>Getting Started(Ch2)</h2><ul><li><p>最大子数组问题  </p><ul><li>蛮力求解</li></ul></li><li><p>循环不变式  </p><ul><li>初始化： 循环开始前满足</li><li>保持：某次循环前成立，循环后也成立</li><li>终止：循环结束后仍成立</li></ul></li><li><p>插入排序  </p><ul><li>非递归算法的分析方法</li></ul><ul><li>RAM模型：无并发的顺序执行<br><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202408012302872.png"><br>Best-case linear in O(n), worst-case quadratic in O(n^2)</li></ul><blockquote><p>插入排序（Insertion Sort）是一种简单直观的排序算法，它的工作方式是通过构建有序序列，对于未排序数据，在已排序序列中从后 向前扫描，找到相应位置并插入。插入排序在实现上，通常使用in-place排序（即只需用到O(1)的额外空间的排序） </p></blockquote><blockquote><p>插入排序算法的步骤如下：</p></blockquote></li></ul><pre><code class="hljs">1. 从第一个元素开始，该元素可以认为已经被排序；   2. 取出下一个元素，在已经排序的元素序列中从后向前扫描；  3. 如果该元素（已排序）大于新元素，将该元素移到下一位置；  4. 重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置；  5. 将新元素插入到该位置后；  6. 重复步骤 2~5。</code></pre><ul><li><p>分治&#x2F;规模压缩策略的引入  </p></li><li><p>分治的递归方法  </p><ul><li>分解：将原问题分解成若干个子问题，形式与原问题一致，但规模更小</li><li>解决： 递归求解子问题，若子问题规模足够小，则停止递归，直接求解</li><li>合并： 将子问题的解合并为原问题的解</li></ul><p>分治算法是一种递归算法，可以多关注分解也可以多关合并。</p></li><li><p>分解时多做事：快速排序（Quick Sort）<br>快速排序是一种常见的排序算法，其基本思想是：</p><ol><li><strong>分解</strong>：选取一个基准元素（pivot），将数组分成两个子数组，一个包含小于基准元素的元素，另一个包含大于或等于基准元素的元素。</li><li><strong>解决</strong>：对这两个子数组递归地进行快速排序。</li><li><strong>合并</strong>：因为子数组是就地排序的，所以不需要额外的合并步骤。</li></ol></li><li><p>合并时多做事：归并排序（Merge Sort）<br>归并排序的步骤如下：</p><ol><li><strong>分解</strong>：将待排序数组分解成两半，递归地分解直到每个子数组只有一个元素。</li><li><strong>解决</strong>：由于最小子数组只有一个元素，可以认为它已经排序好了。</li><li><strong>合并</strong>：将排好序的子数组合并成较大的有序数组，直到最后只有一个排序完毕的大数组。</li></ol></li><li><p>二分应用于递归算法</p><ul><li>归并排序<br>分解：将$ n $个元素的序列分解成两个 $ n&#x2F;2 $ 个元素的子序列<br>解决：递归地排序两个子序列<br>合并：归并两个有序的序列成为已经排好序的解<br>合并的步骤<ol><li>初始化：确定两个已排序的子数组的起始索引，通常这两个子数组是连续的，例如数组arr的左半部分arr[l…m]和右半部分arr[m+1…r]。  </li><li>创建辅助数组：创建一个临时数组，其大小等于两个子数组的大小之和，用于存放合并后的已排序数组。  </li><li>合并：使用两个指针，分别指向两个子数组的起始位置。比较两个指针所指向的元素，将较小的元素复制到临时数组中，并移动指针到下一个位置。重复这个过程，直到一个子数组的所有元素都被复制到临时数组中。  </li><li>复制剩余元素：如果第二个子数组还有剩余的元素，将这些元素复制到临时数组的末尾。同样，如果第一个子数组有剩余的元素，也复制到临时数组的末尾。  </li><li>复制回原数组：将临时数组中的所有元素复制回原数组的相应位置，此时原数组arr[l…r]就是已排序的。<br>分析归并排序$ Θ(nlgn) $</li></ol></li></ul><ul><li>递归树<br>[<img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202408012309765.png"> </li><li>代入法<br><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202408012310424.png"></li><li>数学推导<br>数学归纳法（基本情况、归纳假设、目标证明）</li></ul><blockquote><p>Mathematical induction.<br> Powerful and general proof technique in discrete mathematics.<br> To prove a theorem true for all integers k≥0:<br> Base case: prove it to be true for n &#x3D; 0;<br> Induction hypothesis: assuming it is true for arbitrary n<br> Induction step: show it is true for n+1<br> Claim: 0 + 1+ 2+3 + … + n &#x3D; n(n + 1)&#x2F;2 for all n≥0<br> Proof: (by mathematical induction)<br> Base case (n&#x3D;0)<br> 0 &#x3D; 0(0+1)&#x2F;2<br> Induction hypothesis: assume 0 + 1 + 2 + … + n &#x3D; n(n+1) &#x2F; 2<br> Induction step: 0 + 1 + 2 + … + n + n + 1 &#x3D; n(n+1) &#x2F; 2 + n + 1   &#x3D; (n+1)(n+2)&#x2F;2<br><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202408012311162.png"></p></blockquote><ul><li>n推n-1应用于递归算法</li></ul></li></ul><h2 id="Growth-of-Functions-Ch3"><a href="#Growth-of-Functions-Ch3" class="headerlink" title="Growth of Functions(Ch3)"></a>Growth of Functions(Ch3)</h2><ul><li>O-notation</li><li>Ω-notation</li><li>Θ-notation</li></ul><h2 id="Recurrences-Ch4"><a href="#Recurrences-Ch4" class="headerlink" title="Recurrences(Ch4)"></a>Recurrences(Ch4)</h2><ul><li>Substitution method  代入法</li></ul><pre><code class="hljs">1. 猜测解的形式2. 数学归纳法求解出常数 （改变变量，残差等）3. 证明解的正确性</code></pre><ul><li>Recursion-tree method  递归树法<br>$ T(n) &#x3D; 3T(n&#x2F;4) + Θ(n^2)$</li></ul><pre><code class="hljs">[![pkmQYlR.md.png](https://s21.ax1x.com/2024/05/13/pkmQYlR.md.png)](https://imgse.com/i/pkmQYlR)  </code></pre><ul><li>Master method  <a href="https://blog.csdn.net/cold_code486/article/details/133895874?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171560817116800197070679%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=171560817116800197070679&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~top_click~default-4-133895874-null-null.nonecase&utm_term=%E4%B8%BB%E5%AE%9A%E7%90%86&spm=1018.2226.3001.4450">主方法</a></li></ul><blockquote><ul><li>Three common cases<br><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202408012311231.png"></li><li>Master theorem - examples<br><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202408012312614.png"></li></ul><ul><li>最大子数组的分治算法<br>分解： 将A[low,high]分解成两个n&#x2F;2规模的数组A[low,mid],A[mid+1,high]<br> 解决： 递归寻找两个子数组中的最大子数组<br> 合并： 选择子问题中的最大子数组和的序列<br><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202408012315352.png"><br><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202408012315242.png"><br><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202408012316185.png"></li></ul></blockquote><h2 id="Heapsort-Ch5-不稳定"><a href="#Heapsort-Ch5-不稳定" class="headerlink" title="Heapsort (Ch5)  (不稳定)"></a>Heapsort (Ch5)  (不稳定)</h2><ul><li>认识堆<br><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202408012317303.png"></li></ul><blockquote><ul><li>The height of heap with n elements is lgn。  </li><li>MAX-HEAPIFY ensures that a heap is max heap. O(log n)  </li><li>BUILD-MAX-HEAP produces a max heap from an unordered array. Θ(n)</li></ul><ul><li>MAX-HEAPIFY<br><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202408012317024.png"> MAX-HEAPIFY 过程的描述：（自顶向下的)</li></ul></blockquote><pre><code class="hljs">输入：一个完全二叉树中的节点 i，以及一个数组 A 表示这个二叉树，其中 A[i] 是节点 i 的值，A[left(i)] 和 A[right(i)] 分别是节点 i 的左子节点和右子节点的值，且左右子树都是最大堆。比较节点 i 与其子节点：比较 A[i] 与其子节点 A[left(i)] 和 A[right(i)] 的值。交换：如果 A[i] 小于其子节点中的最大值，那么交换 A[i] 和那个较大的子节点的值。交换后，可能破坏了交换子节点的子树的堆性质。递归：对交换后的子节点执行 MAX-HEAPIFY 过程，以确保该子节点以下的子树维持最大堆性质。结束：当节点 i 的值大于或等于其子节点的值时，或者节点 i 已经是叶节点时，MAX-HEAPIFY 过程结束。</code></pre><ul><li><p>BUILD-MAX-HEAP（循环不变式证明正确性）  </p></li><li><p><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202408012319999.png"></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202408012320195.png"></p></li><li><p>注意这里时间复杂度是O（n）</p></li><li><p><a href="https://zhuanlan.zhihu.com/p/548229201">优先队列</a><br>Support the following basic operations.  </p><ul><li>INSERT(S, x)  （O(logn):自底向上的调整）<br>inserts the element x into S<br>第一步：堆末尾增加一个元素，堆规模增加一；<br>第二步：重新调整为大顶堆。<br><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202408012321085.png"> </li><li>MAXIMUM(S)  (常数时间)<br>returns the element of S with the largest key  </li><li>EXTRACT-MAX(S)  O（logn）<br>removes and returns the element of S with the largest key<br>第一步：移除堆顶元素；<br>第二步：堆顶元素设为堆最后一个元素，堆规模减少一；<br>第三步：重新调整为大顶堆。<br> <img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202408012322326.png"></li><li>INCREASE-KEY(S, x, k)  （O(logn):自底向上的调整）<br>Increase the value of key of element x to the new value k.</li></ul></li></ul><h2 id="Quicksort-Ch6-（不稳定）"><a href="#Quicksort-Ch6-（不稳定）" class="headerlink" title="Quicksort (Ch6)  （不稳定）"></a>Quicksort (Ch6)  （不稳定）</h2><ul><li>快速排序的分治思想  <ul><li>分解：子数组A[p:r]根据枢轴(pivot)A[q]被分为比枢轴小的一侧(low side)A[p:q-1]和比枢轴大的一侧(high side)A[q+1:r]。  </li><li>解决：通过递归调用快速排序实现对A[p:q-1]和A[q+1:r]的排序。  </li><li>合并：因为子数组都是原地排序，此时A[p:r]有序。</li></ul></li><li>快速排序的过程<br><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202408012322696.png"></li><li>快速排序的时间复杂度分析  <ul><li>worse case：</li></ul></li></ul><pre><code class="hljs">T(n) = T(n - 1) + T(0) + Θ(n)      = T(n - 1) + Θ(1) + Θ(n)      = T(n - 1) + Θ(n)      = Θ(n^2)   - best case：T(n) = 2T(n/2) + Θ(n) = Θ(nlogn)  </code></pre><ul><li>快速排序的随机化  <ul><li>将partition在序列中随机中随机抽样</li></ul></li></ul><h2 id="Sorting-in-linear-time-Ch7"><a href="#Sorting-in-linear-time-Ch7" class="headerlink" title="Sorting in linear time (Ch7)"></a>Sorting in linear time (Ch7)</h2><ul><li>基于比较的排序算法的下界  <ul><li>最坏情况的下界(A lower bound for the worst case)<br>从决策树根结点到可达叶结点的最长简单路径的长度（等于决策树的高度）代表最坏情况下的比较次数。<br> 最坏情况下，任何比较排序算法都需要Ω(n lg n)次比较。<br> 证明：设决策树高度为h，<br>h ≥ lg (n!)<br>≥ lg (n&#x2F;e)^n<br>&#x3D; n lg n - n lg e<br>&#x3D;Ω(n lg n)</li></ul></li><li>Counting sort  stable </li><li>Radix sort  stable</li><li>Bucket sort</li></ul><table><thead><tr><th>Sorting methods</th><th>Worst Case</th><th>Best Case</th><th>Average Case</th><th>Stable</th><th>Inplace</th><th>Application</th></tr></thead><tbody><tr><td>Insert Sort</td><td>$n^2$</td><td>$n$</td><td>$n^2$</td><td>T</td><td>T</td><td>Very fast when n&lt;50</td></tr><tr><td>Bubble Sort</td><td>$n^2$</td><td>$n$</td><td>$n^2$</td><td>T</td><td>T</td><td>Very fast when n&lt;50</td></tr><tr><td>Merge Sort</td><td>$nlogn$</td><td>$nlogn$</td><td>$nlogn$</td><td>T</td><td>F</td><td>Need extra space; good for external sort</td></tr><tr><td>Heap Sort</td><td>$nlogn$</td><td>$n$</td><td>$nlogn$</td><td>F</td><td>T</td><td>Good for real-time app</td></tr><tr><td>Quick Sort</td><td>$n^2$</td><td>$nlogn$</td><td>$nlogn$</td><td>F</td><td>T</td><td>Practical and fast</td></tr><tr><td>Counting Sort</td><td>$k+n$</td><td>$k+n$</td><td>$k+n$</td><td>T</td><td>F</td><td>Small, fixed range;</td></tr><tr><td>Radix Sort</td><td>$d(k+n)$</td><td>$d(k+n)$</td><td>$d(k+n)$</td><td>T</td><td>F</td><td>Fixed range</td></tr><tr><td>Bucket Sort</td><td>$n$</td><td>$n$</td><td>$n$</td><td>T</td><td>F</td><td>Uniform distribution</td></tr></tbody></table><h2 id="Medians-and-Order-Statistics-Ch8"><a href="#Medians-and-Order-Statistics-Ch8" class="headerlink" title="Medians and Order Statistics (Ch8)"></a>Medians and Order Statistics (Ch8)</h2><ul><li>基于随机算法的选择算法<br>运用到了划分数组算法，就是我们通常说的快速排序思想。由于该算法用到递归，需要的额外空间取决于递归栈的深度，平均情况下为T(n) &#x3D; T(9n&#x2F;10)+Θ(n)&#x3D; Θ(n)，最坏情况下为T(n) &#x3D; T(9n&#x2F;10)+Θ(n)&#x3D; Θ(n)</li></ul>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">RANDOMIZED-SELECT</span><span class="hljs-params">(A, p, r, i)</span></span><br> <span class="hljs-keyword">if</span> <span class="hljs-selector-tag">p</span> == <span class="hljs-attribute">r</span><br>     return A<span class="hljs-selector-attr">[p]</span>  <span class="hljs-comment">// 1 ≤ i ≤ r - p + 1 when p == r means that i = 1</span><br> <span class="hljs-selector-tag">q</span> = <span class="hljs-built_in">RANDOMIZED-PARTITION</span>(A, <span class="hljs-selector-tag">p</span>, <span class="hljs-attribute">r</span>)<br> k = <span class="hljs-selector-tag">q</span> - <span class="hljs-selector-tag">p</span> + <span class="hljs-number">1</span><br> <span class="hljs-keyword">if</span> <span class="hljs-selector-tag">i</span> == k<br>     return A<span class="hljs-selector-attr">[q]</span>  <span class="hljs-comment">// the pivot value is the answer</span><br> elseif <span class="hljs-selector-tag">i</span> &lt; k<br>     return <span class="hljs-built_in">RANDOMIZED-SELECT</span>(A, <span class="hljs-selector-tag">p</span>, <span class="hljs-selector-tag">q</span> - <span class="hljs-number">1</span>, i)<br> <span class="hljs-keyword">else</span> return <span class="hljs-built_in">RANDOMIZED-SELECT</span>(A, <span class="hljs-selector-tag">q</span> + <span class="hljs-number">1</span>, <span class="hljs-attribute">r</span>, i - k)<br></code></pre></td></tr></table></figure><h2 id="Dynamic-Programming-Ch9"><a href="#Dynamic-Programming-Ch9" class="headerlink" title="Dynamic Programming(Ch9)"></a>Dynamic Programming(Ch9)</h2><ul><li>以下四步：</li></ul><pre><code class="hljs">1. 描述最优解的结构特征。  2. 递归定义最优解的值。  3. 自下而上或备忘录计算最优解的值。  4. 根据计算信息构造最优解。</code></pre><ul><li>最优解和最优解的值</li></ul><pre><code class="hljs">在动态规划问题中，最优解指的是在满足问题约束的条件下，使目标函数达到最优（最大或最小）的解。  最优解的值是指目标函数在这个最优解下达到的具体数值。</code></pre><ul><li>装配线调度问题<br><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202408012323402.png"></li><li>矩阵链乘  O(n^3)<br><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202408012323105.png">最长公共子序列<br><img src="https://img-blog.csdnimg.cn/img_convert/86a5e36f22530a16234bfee2c271f5aa.png" alt="pkmo1sg.md.png"><br><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202408012325206.png"><br> <img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202408012325827.png"></li><li>最大子数组<br><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202408012325646.png"></li></ul><h2 id="Greedy-Algorithms-Ch10"><a href="#Greedy-Algorithms-Ch10" class="headerlink" title="Greedy Algorithms (Ch10)"></a>Greedy Algorithms (Ch10)</h2><ul><li><p>贪心策略基本原理(Elements of the greedy strategy)<br>一般情况下，我们可以根据以下步骤设计贪心算法。</p><ol><li>最优化问题为你做出选择后只有一个子问题需要求解。</li><li>证明每次做出贪心选择后，原问题总是有最优解，所以贪心选择总是安全的。</li><li>证明做出贪心选择后的子问题和贪心选择一起构成原问题的最优解，即原问题具有最优子结构。<br>能够用贪心算法求解的问题具有贪心选择性质和最优子结构。</li></ol></li><li><p>贪心算法和动态规划的对比：<br>动态规划的选择依赖于子问题的解，所以一般采用自底向的方法求解问题。<br>   贪心算法不依赖于子问题的解，所以一般采用自顶向下的方法求解问题。<br>   使用贪心算法前，我们必须证明每个步骤做出贪心选择能生成全局最优解。</p></li><li><p>最优子结构(Optimal substructure)<br>最优子结构(optimal substructure)：如果一个问题的最优解包含其子问题的最优解，那么称该问题具有最优子结构。<br>   贪心算法通常采用一个非常直接的方法运用最优子结构，假定通过对原问题的贪心选择就可以得到子问题，我们只需要证明做出贪心选择后的子问题和贪心选择一起构成原问题的最优解。该方法隐式地运用了归纳法，证明了每一步贪心选择都能构成原问题的最优解。  </p></li><li><p>活动选择问题<br>贪活动结束时间<br>   证明最优子结构的正确性：复制粘贴法</p></li><li><p>分数背包<br>贪性价比</p></li><li><p>0&#x2F;1背包<br><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202408012326596.png"></p></li><li><p>哈夫曼编码</p></li></ul><h2 id="Shortest-Paths-（Ch11）"><a href="#Shortest-Paths-（Ch11）" class="headerlink" title="Shortest Paths （Ch11）"></a>Shortest Paths （Ch11）</h2><ul><li>Dijkstra’s algorithm O（VlgV+E）<br>Dijkstra算法的实现为：从源点s开始进行广度优先搜索，通过从s点发出的所有边(s,v)将s的邻接顶点加入优先队列Q，并松弛所有从s发出的边。然后不断从优先队列Q中将距离s最近的顶点u出队，对u进行广度优先搜索，通过从s点发出的所有边(s,v)将s的邻接顶点加入优先队列，并松弛所有从 u 发出的边。直到Q为空，Dijkstra算法终止。<br><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202408012326201.png">   无负边权值的单源最短路径</li><li>Bellman-Ford algorithm</li></ul><pre><code class="hljs">Dijkstra算法无法处理负权值的边，Bellman-Ford算法可以。其思想是遍历每个端点∣V−1∣次，每次对所有的边进行松弛操作。它还有一个优点,就是能处理负权环.因为我们是V-1次松弛操作.在这种情况下，保证能把这个图的最短路径求出来.第V次还有可以能松弛的,那说明就是负权环.![截屏2024-05-14 21.30.27.png](https://img2.imgtp.com/2024/05/14/ndwa7zkq.png)  </code></pre><ul><li><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202408012327178.png"></li><li><a href="https://zhuanlan.zhihu.com/p/595790984">Floyd-Warshall algorithm</a><br> Floyd算法采用动态规划的思想  </li><li><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202408012328469.png"></li><li>Johnson算法</li></ul><h2 id="Back-Tracking-Algorithms-（Ch12）"><a href="#Back-Tracking-Algorithms-（Ch12）" class="headerlink" title="Back-Tracking Algorithms （Ch12）"></a>Back-Tracking Algorithms （Ch12）</h2><ul><li>约束条件</li></ul><pre><code class="hljs">分为显式约束和隐式约束  显式：规定了问题的解的分量的取值范围。如求n的全排列每个位置只能取1~n  隐式：用于判定候选解是否为可行解。如全排列的每个数字不允许重复。  问题状态和状态空间树      状态空间树是描述问题解空间的树形结构，每个结点称为一个问题状态。树的每条分支代表一次决策，从根结点到叶结点的路径就代表了一个候选解，称该叶结点所代表的状态为解状态。如果候选解是可行解则称之为答案状态。</code></pre><ul><li>剪枝函数</li></ul><pre><code class="hljs">剪枝函数分为约束函数和限界函数  约束函数：避免无所谓的搜索那些已知不含答案状态的子树。  限界函数：用于最优化问题，剪去那些不可能含有最优答案结点的子树。  二者的区别在于：约束函数是对约束条件的实现，剪去不带答案结点的子树。而限界函数常用于求解最优化问题，它剪去的子树可能带答案结点，但不会是最优答案结点。</code></pre><ul><li>回溯法</li></ul><pre><code class="hljs">回溯法是一种更为一般的解题方法。回溯法是通过搜索状态空间树来求问题的可行解或最优解的方法。本质就是dfs + 剪枝。</code></pre><ul><li>状态空间树的一些概念   <ul><li>活结点：没有生成全部儿子结点  </li><li>死结点：儿子已经全部生成的结点，或已经剪枝无需向下扩展的结点  </li><li>E-结点：正在生成其儿子结点的活结点。  </li><li>回溯法：当前E-结点一旦生成一个新的子结点，孩子就进入活结点表，且变成新的E结点  </li><li>回溯法的基本思想是按照深度优先搜索的策略，从根节点出发深度搜索解空间树，当搜索到某一节点时，如果该节点可能包含问题的解，则继续向下搜索；反之回溯到其祖先节点，尝试其他路径搜索。</li><li>分支限界法：当前E-结点要生成其全部子结点到变为死结点，子结点进入活结点表，之后从活结点表中选择一个作为新的E-结点</li><li>分支限界法是利用广度优先搜索的策略或者以最小耗费(最大效益)优先的方式搜索问题的解空间树，对于解空间树中的活节点只有一次机会成为拓展节点，活节点一旦成为扩展节点，那么将一次性产生其所有儿子节点。  </li><li>对于优先队列式的分支限界法，这些儿子节点中，不可行解或者一定不能成为最优解的儿子节点会被舍弃，其余儿子节点将会按照优先级依次存入一个活节点表(队列)，此后会挑出活节点表优先级最高的节点作为下次扩展节点，重复此过程，直至找到问题的最优解。</li></ul></li></ul><h2 id="NP-Completeness-（Ch13）"><a href="#NP-Completeness-（Ch13）" class="headerlink" title="NP-Completeness （Ch13）"></a>NP-Completeness （Ch13）</h2><ul><li>多项式时间 (Polynomial time)<br>我们通常认为多项式时间可解的问题是可处理的。原因有三：</li></ul><pre><code class="hljs">经验表明，一旦某个问题的第一个多项式时间算法被发现后，就会出现更为高效的算法。  对于许多合理的计算模型，若一个问题在一个模型上多项式时间可解，则该问题在另一个模型上多项式时间可解。  由于多项式在加法、乘法和组合运算下是封闭的，因此多项式时间可解问题具有很好的封闭性。  </code></pre><ul><li>不可判定问题</li></ul><pre><code class="hljs">停机问题</code></pre><ul><li><p>NP 类是一个能够被多项式时间算法验证的语言类。<br>NP 表示非确定性多项式时间 (nondeterministic polynomial time)  </p></li><li><p>NP-complete</p><ul><li>首先P问题是一类可以在多项式时间内求解的问题；  </li><li>NP问题是一类可以在多项式时间内验证解是否正确的问题；  </li><li>显然， P⊆NP NP-Complete问题其实是一类特殊的NP问题，特殊之处在于所有的NP问题都可以多项式归约到NP-Complete问题上，即 NP≤pNP−Complete  换句话说就是，如果能够解决NP-Complete问题，就能解决所有的NP问题。  </li><li>有6种NP-complete问题：</li></ul><ol><li>Packing problems: set-packing, independent set.  </li><li>Covering problems: set-cover, vectex-cover.  </li><li>Constraint satisfaction problems: SAT, 3-SAT.  </li><li>Sequencing problems: hamiltonian-cycle, TSP.  </li><li>Partitioning problems: 3D-matching,3-color.  </li><li>Numerical problems: subset-sum, knapsack.</li></ol><p><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202408012333991.png"></p></li></ul><p>​     </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>基于Github+Hexo的个人博客搭建</title>
    <link href="/2024/05/02/hello-world/"/>
    <url>/2024/05/02/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr><ul><li>对于计算机专业同学来说，写博客有很多好处，借用一张图：<img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202407292332046.png"></li><li>除了使用博客网站之外，也可以搭建一个自己的博客。在很多成熟的框架的帮助下，并不需要系统的网络知识就可以搭建一个博客。</li><li>该方案就是一个简单的选择，不需要服务器，不需要域名，也不用后台。</li><li>本篇在macOS环境下进行配置。</li></ul><hr><h1 id="一、可能需要的前置知识"><a href="#一、可能需要的前置知识" class="headerlink" title="一、可能需要的前置知识"></a>一、可能需要的前置知识</h1><ul><li><p>Git相关知识和操作</p></li><li><p>命令行操作</p></li><li><p>GitHub基本使用</p></li><li><p>建站相关知识</p></li><li><p>Markdown语法</p></li><li><p>基本HTML&#x2F;CSS语法</p></li></ul><h1 id="二、该方案的优缺点"><a href="#二、该方案的优缺点" class="headerlink" title="二、该方案的优缺点"></a>二、该方案的优缺点</h1><ul><li><p>优点：</p><ul><li>免费：GitHub 免费且Hexo免费</li><li>支持CDN加速内容分发</li><li>可拓展，有很多开源的主题</li><li>省事，不用维护服务器</li><li>安全，GitHub提供较高的安全性</li><li>静态网站加载速度快</li></ul></li><li><p>缺点：</p><ul><li>静态页面不能交互，不支持数据库</li><li>GitHub的使用限制</li><li>没有后台</li></ul></li></ul><h1 id="三、GitHub-Hexo搭建博客原理简介"><a href="#三、GitHub-Hexo搭建博客原理简介" class="headerlink" title="三、GitHub+Hexo搭建博客原理简介"></a>三、GitHub+Hexo搭建博客原理简介</h1><ul><li><strong>网站</strong>，可以简单理解为把编写好的网页放在一台24小时不关机的主机上，然后通过大家都可以通过浏览器访问这台主机，阅读上面存放的网页。</li><li><strong>博客（Blog）</strong>，全称网络日志（Weblog），是一种在线内容发布形式，通常以倒叙的时间顺序展示一系列个人或团队的日志、文章、图片、视频等。博客可以是个人表达思想、分享信息和记录生活的方式，也可以是商业机构、组织或新闻媒体用来发布新闻、评论和专业知识的一种平台。</li><li><strong>GitHub</strong> 是一个基于Git的版本控制和代码托管平台，它为开发者提供了一个云端的服务来托管和管理代码，同时也提供了一系列协作特性，如问题跟踪、项目管理、代码审查和拉取请求（Pull Requests）。</li><li>**GitHub Pages **是一个静态网站托管服务，它直接从 GitHub 上的仓库中获取 HTML、CSS 和 JavaScript 文件，然后为用户托管网站。这个服务非常适合个人、项目或组织的网站，尤其是开源项目，因为它允许用户直接从其代码库中提供文档和其他相关信息。</li><li><strong>Hexo</strong> 是一个快速、简洁且高效的静态博客框架，由Node.js编写。它允许用户使用Markdown（或其他渲染引擎）编写文章，然后生成静态网页，这些网页可以托管在GitHub Pages、自己的服务器或其他静态网站托管服务上。</li><li>这里<strong>Github Pages</strong>扮演了主机的角色，可以把写好的网页放在这里。<strong>Hexo</strong> 可以简单理解为把写好的文档转化为网页。</li></ul><h1 id="四、环境配置及准备工作"><a href="#四、环境配置及准备工作" class="headerlink" title="四、环境配置及准备工作"></a>四、环境配置及准备工作</h1><h2 id="1-注册并登陆GitHub"><a href="#1-注册并登陆GitHub" class="headerlink" title="1.注册并登陆GitHub"></a>1.注册并登陆GitHub</h2><hr><p>登录 GitHub 账号，新建一个名为 <code>username.github.io</code>（这里的 username 要替换成自己的实际的用户名） 的仓库，（仓库名设置为<code>username.github.io</code>是因为这是GitHub Pages服务的一个特殊命名约定，这也是以后博客网站的域名。）<img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202407300013292.png"></p><p>填写好以后点击页面末尾的创建，仓库就创建好了。</p><h2 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2.安装Node.js"></a>2.安装Node.js</h2><hr><ul><li>通过Homebrew安装Node.js</li></ul><p><a href="https://brew.sh/">Homebrew</a>是macOS的软件包管理器。打开终端输入</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">brew install node<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202407301314287.png"></p><p>安装 Node.js 会包含环境变量以及 npm 的安装，安装后，可以在命令行输入如下命令检测 Node.js 是否安装成功：</p><p>第一个命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">node -v<br></code></pre></td></tr></table></figure><p>这个命令，在 nodejs 安装成功的情况下会显示 nodejs 的版本号。</p><p>第二个命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm -v<br></code></pre></td></tr></table></figure><p>这个命令，在 nodejs 安装成功的情况下会显示 npm 的版本号。</p><ul><li>如果你还没有安装 Homebrew，可以按照以下步骤来安装它。</li></ul><p>1打开「终端」，输入并执行以下命令来安装 Homebrew：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/bash -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><p>2根据提示输入你的用户密码，并按回车键开始安装过程。</p><p>3在 Homebrew 安装完成后，输入并执行以下命令来安装 Git：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>git<br></code></pre></td></tr></table></figure><p>通过上述步骤，你可以轻松地在 Mac 上安装和使用 Git。安装完成后，可以运行<code>git --version</code>命令来验证 Git 是否已成功安装。</p><ul><li>设置用户名和邮箱</li></ul><p>因为 Git 是分布式版本控制系统，所以需要设置用户名和邮箱作为一个标识，在命令行输入如下：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git config --global user.name &quot;user_name&quot; # user_name 填入 GitHub 用户名<br>git config --global user.email &quot;user_email&quot; # user_email 填入 GitHub 注册的邮箱<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202407301324205.png"></p><h2 id="3-配置SSH-key"><a href="#3-配置SSH-key" class="headerlink" title="3.配置SSH key"></a>3.配置SSH key</h2><hr><ul><li><p>打开终端，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;user.email&quot;</span> <span class="hljs-comment"># user.email 为GitHub 上注册的邮箱</span><br></code></pre></td></tr></table></figure><p>然后直接三个回车即可，默认不需要设置密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/.ssh<br></code></pre></td></tr></table></figure><p>查看是否已经有 ssh 密钥。找到.ssh文件夹，然后找到生成的 <code>.ssh</code> 的文件夹中的 <code>id_rsa.pub</code> 密钥，将内容全部复制。其中 <code>id_rsa</code> 是私钥不能泄露，<code>id_rsa.pub</code> 是公钥可以放心告诉他人。</p><p>打开 <a href="https://github.com/settings/ssh/new">GitHub SSH and GPG keys</a> 页面，新建一个 ssh key：</p><p><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202407301337237.png"></p><p><code>Title</code> 为标题，任意填即可，将刚刚复制的 <code>id_rsa.pub</code> 内容粘贴进去，最后点击<code>Add SSH key</code>。在 <code>Git Bash</code> 中检测 <code>GitHub</code> 公钥设置是否成功，输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>验证是否连接成功。</p><p><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202407301337150.png"></p></li></ul><h1 id="四、创建使用Hexo框架"><a href="#四、创建使用Hexo框架" class="headerlink" title="四、创建使用Hexo框架"></a>四、创建使用<a href="https://hexo.io/docs/">Hexo框架</a></h1><ul><li><p>安装与初始化</p><p>在终端中输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli <span class="hljs-comment"># 此命令完成对 hexo 的安装</span><br></code></pre></td></tr></table></figure><p>安装完成后，在电脑的某个地方新建一个文件夹（名字可以随便取）专门用于存放博客代码，比如我的是 <code>\Blogs</code>，由于这个文件夹将来存放博客的所有内容和素材，以及所有的博客操作都会在其中完成，所以最好不要随便放。</p><p>进入新建的博客目录，输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init <span class="hljs-comment"># 该命令完成 hexo 在本地博客目录的初始化</span><br>npm install <span class="hljs-comment"># 安装组件</span><br></code></pre></td></tr></table></figure><ul><li>生成静态文件</li></ul><p>在终端中输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g <span class="hljs-comment"># 生成静态文件</span><br></code></pre></td></tr></table></figure><p>执行以上命令后，Hexo 就会在 <code>public</code> 文件夹中生成相关的 <code>html</code> 文件，这些文件将来都是要提交到 <code>GitHub</code> 上的 <code>username.github.io</code> 的仓库中去的。</p><ul><li>本地预览</li></ul><p>在终端输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s <span class="hljs-comment"># 开启本地预览</span><br></code></pre></td></tr></table></figure><p><code>hexo s</code> 是开启本地预览服务，打开浏览器访问 <code>http://localhost:4000</code> 即可看到内容，<code>Ctrl+C</code> 停止本地预览。本地预览可以实时查看博客的编辑情况，待博客写完后一起部署到 <code>GitHub</code> 上。</p><p>第一次初始化的时候 <code>hexo</code> 已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑。</p><p><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202407311258744.png"></p><p><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202407311259211.png"></p><h1 id="五、上传到GitHub完成搭建"><a href="#五、上传到GitHub完成搭建" class="headerlink" title="五、上传到GitHub完成搭建"></a>五、上传到GitHub完成搭建</h1><ul><li>配置站点配置文件</li></ul><p><code>hexo</code> 有 2 种 <code>_config.yml</code> 文件，一个是根目录下的全局的 <code>_config.yml</code>，一个是各个主体 <code>theme</code> 下的 <code>_config.yml</code>。将前者称为站点配置文件， 后者称为主题配置文件。</p><p>打开根目录下站点配置文件 <code>_config.yml</code>，配置有关 <code>deploy</code> 的部分：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:username/username.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">gh-pages</span><br></code></pre></td></tr></table></figure><ul><li>安装插件</li></ul><p>在终端中输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save <span class="hljs-comment"># 安装部署插件</span><br></code></pre></td></tr></table></figure><p>如果不进行上述操作，直接使用 <code>hexo d</code> 部署到 <code>GitHub</code>，将会报错。</p><ul><li>部署到 GitHub</li></ul><p>在终端中输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo c<br>hexo d<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202407311300365.png"></p><p><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202407311300769.png"></p><p>然后我们需要在库设置（Repository Settings）中将默认分支设置为<code>_config.yml</code> 配置中的分支名称。</p><p><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202407311303393.png">然后在 pages 页面调整源分支：</p><p><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202407311303900.png"></p><p>不出意外的话是不会出意外的，<strong>稍等片刻</strong>我们访问<code>用户名.github.io</code>就可以看到默认 hexo 了。</p><p><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202407311304173.png"></p><h1 id="六、常用指令和发布文章"><a href="#六、常用指令和发布文章" class="headerlink" title="六、常用指令和发布文章"></a>六、常用指令和发布文章</h1><ul><li>常用指令</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;postName&quot;</span>        <span class="hljs-comment">//新建文章</span><br>hexo <span class="hljs-keyword">new</span> page <span class="hljs-string">&quot;pageName&quot;</span>        <span class="hljs-comment">//新建页面</span><br>hexo g          <span class="hljs-comment">//生成静态页面至public目录</span><br>hexo server         <span class="hljs-comment">//开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span><br>hexo deploy         <span class="hljs-comment">//将.deploy目录部署到GitHub</span><br></code></pre></td></tr></table></figure><ul><li>常用组合</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">hexo clean<br>hexo g<br>hexo d<br>hexo d -g #生成部署<br>hexo s -g #生成预览<br></code></pre></td></tr></table></figure><ul><li>发布文章</li></ul><p>终端<code>cd</code>到<code>Blogs</code>文件夹下，执行如下命令新建文章：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;xxx&quot;</span><br></code></pre></td></tr></table></figure><p>名为<code>xxx.md</code>的文件会建在目录<code>.../blog/source/_posts</code>下。</p><h1 id="七、设置主题"><a href="#七、设置主题" class="headerlink" title="七、设置主题"></a>七、设置主题</h1><ul><li><p>选择的是fluid主题</p></li><li><p>主题仓库：<a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p></li><li><p>使用文档：<a href="https://hexo.fluid-dev.com/docs/start/">开始使用 | Hexo Fluid 用户手册 (fluid-dev.com)</a></p></li><li><p>Hexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客目录执行命令：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure><p>然后在博客目录下创建 <code>_config.fluid.yml</code>，将主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml</a> 内容复制进去。</p></li><li><p>然后就可以根据使用文档自定义自己的博客站点了。</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/pukueh/ImagineHosting@main/images_for_blogs/202408011834244.png"></p></li></ul><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><hr><ul><li>到这里博客已经搭建完成了，可以用一些基本指令进行文章的发布。</li><li>进一步还支持更换主题，自定义域名，seo优化等个性化设置。</li><li>下面是一些可能用到的文章。</li><li><a href="https://cloud.tencent.com/developer/article/1520557">这可能是迄今为止最全的hexo博客搭建教程</a></li><li><a href="https://tech.yemengstar.com/hexo%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B-%E4%BD%BF%E7%94%A8github%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2hexo-%E5%B0%8F%E7%99%BD%E5%90%91%E6%95%99%E7%A8%8B/">HEXO 系列教程 | 使用 GitHub 部署静态博客 HEXO | 小白向教程</a></li><li><a href="https://github.com/Ailln/awesome-hexo-theme"> 排名前 10 的 <em>Hexo</em> 主题</a></li><li><a href="https://blog.lixiaomu.fun/posts/43857/"><em>Hexo</em>10款好看的主题｜新手建站必备！</a></li><li><a href="https://www.cnblogs.com/eidolonw/p/13070099.html">hexo从GitHub上克隆到本地-恢复使用操作</a></li><li><a href="https://blog.csdn.net/qq_42247008/article/details/85052027">hexo 不小心把本地项目删了怎么重新配置</a></li></ul><hr></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
